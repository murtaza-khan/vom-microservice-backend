
type User {
  id: ID!
  name: String!
  email: String!
  age: UnsignedInt
  posts(q: String, first: Int, last: Int, before: String, after: String, filterBy: JSONObject, orderBy: String): PostsConnection
  comments(q: String, first: Int, last: Int, before: String, after: String, filterBy: JSONObject, orderBy: String): CommentsConnection
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
}

type UsersConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserPayload {
  errors: [ErrorPayload]
  user: User
}

type DeleteAccountPayload {
  errors: [ErrorPayload]
  count: Int
}

input SignupUserInput {
  name: String!
  email: String!
  password: String!
  age: UnsignedInt
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateProfileInput {
  name: String
  age: UnsignedInt
}

input UpdateEmailInput {
  email: String!
  currentPassword: String!
}

input UpdatePasswordInput {
  currentPassword: String!
  newPassword: String!
  confirmPassword: String!
}
