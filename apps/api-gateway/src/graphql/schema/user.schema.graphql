type User {
  id: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  userRole: String!
  organization: String!
  groupId: String!
}

input UserInPut {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  userRole: String
  organization: String
  groupId: String
}

input UserUpdateInPut {
  id: Int!
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  userRole: String
  organization: String
  groupId: String
}

input DeleteAccountInput {
  id: Int
  email: String
}

type UsersConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserPayload {
  errors: [ErrorPayload]
  user: User
}

type DeleteAccountPayload {
  errors: [ErrorPayload]
  count: Int
}

input OrgIdInput{
orgId: String!
}

input GroupIdInput{
groupIdInput: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateProfileInput {
  name: String
  age: UnsignedInt
}

input UpdateEmailInput {
  email: String!
  currentPassword: String!
}

input UpdatePasswordInput {
  currentPassword: String!
  newPassword: String!
  confirmPassword: String!
}

input ForgotPasswordInput {
  email: String!
}

type ForgotPassword {
  message: String!
  link: String!
}

input ResetPasswordInput {
  id: String!
  token: String!
}

type ResetPassword {
  status: Boolean!
}

input ResetPasswordUpdateInput {
  id: String!
  token: String!
  newPassword: String!
  confirmPassword: String!
}


type Token {
  token: String!
}
